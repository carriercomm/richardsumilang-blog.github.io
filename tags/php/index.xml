<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Top Secret Labs - Richard Sumilang </title>
    <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://richardsumilang.com/tags/php/</link>
    <language>en-us</language>
    <author>Richard Sumilang</author>
    
    <updated>Sun, 26 Aug 80200 02:02:02 PST</updated>
    
    <item>
      <title>A thing or two about style guides</title>
      <link>http://richardsumilang.com/programming/a-thing-or-two-about-style-guides/</link>
      <pubDate>Sun, 26 Aug 80200 02:02:02 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/programming/a-thing-or-two-about-style-guides/</guid>
      <description>

&lt;p&gt;A style guide should be chosen when working on a solo project or with a team.
This keeps the code manageable when you or your peers come back to work on it in
the future. It doesn&amp;rsquo;t matter which style guideline you choose as long as you
stick with it. In a sense, writing clean code will also help reduce technical
debt. Below is a collection of style guides that I collected over time. Some
important rules are repeated in other styles. It&amp;rsquo;s nice to keep consistency (to
a degree) if you are writing in multiple programming languages but ultimately
it&amp;rsquo;s best to do what&amp;rsquo;s best for each language.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Any fool can write code that a computer can understand.
Good programmers write code that humans can understand.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Martin Fowler, Refactoring: Improving the Design of Existing Code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Last updated: Feb 8th, 2015.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;general:18519818bf3de3e7e682d6ba7493a063&#34;&gt;General&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Programming_style&#34; title=&#34;Programming style&#34;&gt;Programming style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style&#34; title=&#34;MDN Coding Style&#34;&gt;MDN Coding Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.komputado.com/eseoj/1tbs.htm&#34; title=&#34;The One True Brace Style&#34;&gt;The One True Brace Style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;c:18519818bf3de3e7e682d6ba7493a063&#34;&gt;C++&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stroustrup.com/bs_faq2.html&#34; title=&#34;Bjarne Stroustrup&#39;s C++ Style and Technique FAQ&#34;&gt;Bjarne Stroustrup&amp;rsquo;s C++ Style and Technique FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/cppguide.html&#34; title=&#34;Google C++ Style Guide&#34;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;html-css:18519818bf3de3e7e682d6ba7493a063&#34;&gt;HTML/CSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codeguide.co/&#34; title=&#34;Code Guide by @mdo&#34;&gt;Code Guide by @mdo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/styleguide/css&#34; title=&#34;CSS Style Guide&#34;&gt;CSS Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml&#34; title=&#34;Google HTML/CSS Style Guide&#34;&gt;Google HTML/CSS Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3schools.com/html/html5_syntax.asp&#34; title=&#34;HTML(5) Style Guide and Coding Conventions&#34;&gt;HTML(5) Style Guide and Coding Conventions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Java&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://source.android.com/source/code-style.html&#34; title=&#34;Android Code Style&#34;&gt;Android Code Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/codeconvtoc-136057.html&#34; title=&#34;Code Conventions for the Java Programming Language&#34;&gt;Code Conventions for the Java Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/javaguide.html&#34; title=&#34;Google Java Style Guide&#34;&gt;Google Java Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaranch.com/style.jsp&#34; title=&#34;Java Programming Style Guide&#34;&gt;Java Programming Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;javascript:18519818bf3de3e7e682d6ba7493a063&#34;&gt;JavaScript&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://google-styleguide.googlecode.com/svn/trunk/angularjs-google-style.html&#34; title=&#34;An AngularJS Style Guide for Closure Users at Google&#34;&gt;An AngularJS Style Guide for Closure Users at Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/styleguide/javascript&#34; title=&#34;GitHub JavaScript style&#34;&gt;GitHub JavaScript style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&#34; title=&#34;Google JavaScript Style Guide&#34;&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/felixge/node-style-guide&#34; title=&#34;Node.js Style Guide&#34;&gt;Node.js Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lisp:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Lisp&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml&#34; title=&#34;Common Lisp Style Guide&#34;&gt;Common Lisp Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;objective-c:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Objective C&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html&#34; title=&#34;Apple&#39;s Programming with Objective C Conventions&#34;&gt;Apple&amp;rsquo;s Programming with Objective C Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/objective-c-style-guide&#34; title=&#34;GitHub Objective C Style Guide&#34;&gt;GitHub Objective C Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml&#34; title=&#34;Google Objective C Style Guide&#34;&gt;Google Objective C Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NYTimes/objective-c-style-guide&#34; title=&#34;NYTimes Objective-C Style Guide&#34;&gt;NYTimes Objective-C Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;php:18519818bf3de3e7e682d6ba7493a063&#34;&gt;PHP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pear.php.net/manual/en/standards.php&#34; title=&#34;PEAR Coding Standards&#34;&gt;PEAR Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.php-fig.org/psr/psr-2/&#34; title=&#34;PSR-2 Coding Style Guideline&#34;&gt;PSR-2 Coding Style Guideline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://symfony.com/doc/current/contributing/code/standards.html&#34; title=&#34;Symfony Coding Standards&#34;&gt;Symfony Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://framework.zend.com/manual/1.12/en/coding-standard.html&#34; title=&#34;Zend Coding Standards&#34;&gt;Zend Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;python:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Python&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/pyguide.html&#34; title=&#34;Google Python Style Guide&#34;&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34; title=&#34;PEP 8 - Style Guide for Python Code&#34;&gt;PEP 8 - Style Guide for Python Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ruby:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Ruby&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/styleguide/ruby&#34; title=&#34;GitHub Ruby Styleguide&#34;&gt;GitHub Ruby Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bestie/objective-ruby-style-guide&#34; title=&#34;The Objective Ruby Style Guide&#34;&gt;The Objective Ruby Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;scala:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Scala&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.github.io/effectivescala/&#34; title=&#34;Effective Scala&#34;&gt;Effective Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.scala-lang.org/style/&#34; title=&#34;Scala Style Guide&#34;&gt;Scala Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;shell:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Shell&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.inquisitor.ru/doc/coding-style-shell.html&#34; title=&#34;Coding style guidelines: Shell script&#34;&gt;Coding style guidelines: Shell script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/shell.xml&#34; title=&#34;Google Shell Style Guide&#34;&gt;Google Shell Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;swift:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Swift&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/swift-style-guide&#34; title=&#34;GitHubs Swift Style Guide&#34;&gt;GitHubs Swift Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vim:18519818bf3de3e7e682d6ba7493a063&#34;&gt;Vim&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/vimscriptguide.xml&#34; title=&#34;Google Vimscript Style Guide&#34;&gt;Google Vimscript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Working with Apple&#39;s iOS image orientation</title>
      <link>http://richardsumilang.com/programming/php/graphics/working-with-apples-ios-image-orientation/</link>
      <pubDate>Sun, 106 Aug 171000 10:10:10 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/programming/php/graphics/working-with-apples-ios-image-orientation/</guid>
      <description>&lt;p&gt;You might notice pictures taken with an iOS device (iPhone or iPad) look like
they are not rotated properly when transferring them to another device or
software. This happens because the device is held at a certain angle when the
picture is taken and it&amp;rsquo;s up to the software at the receiving end to display it
however it wants.&lt;/p&gt;

&lt;p&gt;Apple&amp;rsquo;s camera will write orientation info into the exif headers of images
taken and you can rotate it accordingly.&lt;/p&gt;

&lt;p&gt;Here is an example of rotating an image using PHP with the ImageMagick library;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34; title=&#34;Rotate iOS image&#34;&gt;&amp;lt;?php

// Rotate iOS image
// @author Richard Sumilang &amp;lt;me@richardsumilang.com&amp;gt;

$imageFile = &#39;/foo/bar.jpg&#39;;
$finfo = finfo_open(FILEINFO_MIME_TYPE);
$mimeType = finfo_file($finfo, $imageFile);
finfo_close($finfo);

// Detect if jpeg or tiff
if ( in_array($mimeType, [&#39;image/jpeg&#39;, &#39;image/tiff&#39;]) ) {
    $exif = exif_read_data($imageFile);
    if ( isset($exif[&#39;Orientation&#39;]) &amp;amp;&amp;amp; !empty($exif[&#39;Orientation&#39;]) ) {

        // Decide orientation
        if ( $exif[&#39;Orientation&#39;] == 3 ) {
            $rotation = 180;
        } else if ( $exif[&#39;Orientation&#39;] == 6 ) {
            $rotation = 90;
        } else if ( $exif[&#39;Orientation&#39;] == 8 ) {
            $rotation = -90;
        } else {
            $rotation = 0;
        }

        // Rotate the image
        if ( $rotation ) {
            $imagick = new Imagick();
            $imagick-&amp;gt;readImage($imageFile);
            $imagick-&amp;gt;rotateImage(new ImagickPixel(&#39;none&#39;), $rotation);
            $imagick-&amp;gt;writeImage($imageFile);
            $imagick-&amp;gt;clear();
            $imagick-&amp;gt;destroy();
        }

    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Only jpeg and tiff files contain exif information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chef Gearman Cookbook v0.1.0</title>
      <link>http://richardsumilang.com/server/virtualization/chef/chef-gearman-cookbook-v0-1-0/</link>
      <pubDate>Sun, 66 Aug 120600 06:06:06 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/server/virtualization/chef/chef-gearman-cookbook-v0-1-0/</guid>
      <description>&lt;p&gt;A little &lt;a href=&#34;http://gearman.org/&#34; title=&#34;Gearman&#34;&gt;Gearman&lt;/a&gt; cookbook I put together for &lt;a href=&#34;http://www.getchef.com/&#34; title=&#34;Chef&#34;&gt;Chef&lt;/a&gt;. Supports installing
multiple versions by source. Also has a recipe for the &lt;a href=&#34;https://pecl.php.net/package/gearman&#34; title=&#34;Gearman PHP Extension&#34;&gt;PHP extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rsumilang/chef-gearman&#34; title=&#34;Chef Gearman Cookbook&#34;&gt;Grab it from GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;kthxbye.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Type Casting String by Concatenation Performance Test in PHP</title>
      <link>http://richardsumilang.com/programming/php/performance/type-casting-string-by-concatenation-performance-test-in-php/</link>
      <pubDate>Sun, 56 Aug 80500 05:05:05 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/programming/php/performance/type-casting-string-by-concatenation-performance-test-in-php/</guid>
      <description>

&lt;p&gt;The purpose of this test is to see if casting an object to a string by
concatenating it was actually slower than using normal type casting. Here is my
source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34; title=&#34;test-typecast.php&#34;&gt;&amp;lt;?php

// Setup
$tests = 1000000;
class Foo {
    public function __toString() {
        return &#34;bar&#34;;
    }
}

// Test 1
$x = new Foo();
$timer = microtime();

for ($i = 0; $i &amp;lt; $tests; $i++) {
    $y = &#34;&#34; . $x;
}

$timer -= microtime();
echo &#34;Test 1 complete. Total time: {$timer}\n&#34; . PHP_EOL;

// Test 2
$x = new Foo();
$timer = microtime();

for ($i = 0; $i &amp;lt; $tests; $i++) {
    $y = (string)$x;
}

$timer -= microtime();
echo &#34;Test 2 complete. Total time: {$timer}\n&#34; . PHP_EOL;

// Done.
exit();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I got in my terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34; title=&#34;Results&#34;&gt;$php -f test-typecast.php
Test 1 complete. Total time: -0.203729
Test 2 complete. Total time: -0.16766&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;explanation:a40861c8c18b47fef614c59e41b70103&#34;&gt;Explanation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Test 1&lt;/em&gt; tells PHP to 1) create a string, 2) concatenate it to an object, 3) PHP
can&amp;rsquo;t do that so it tries to call the &lt;code&gt;$x-&amp;gt;__toString()&lt;/code&gt; method, 4) now
concatenate &lt;code&gt;&amp;quot;&amp;quot; . $x-&amp;gt;__toString();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Test 2&lt;/em&gt; in this case will 1) check the type of &lt;code&gt;$x&lt;/code&gt;, and 2) return the value of
&lt;code&gt;$x-&amp;gt;__toString()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Naturally the process with the least steps would be faster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install Gearman for PHP on OS X</title>
      <link>http://richardsumilang.com/programming/php/gearman/install-gearman-for-php-on-os-x/</link>
      <pubDate>Sun, 46 Aug 230400 04:04:04 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/programming/php/gearman/install-gearman-for-php-on-os-x/</guid>
      <description>&lt;p&gt;Setup &lt;a href=&#34;http://www.php.net/manual/en/book.gearman.php&#34; title=&#34;Gearman PHP&#34;&gt;Gearman&lt;/a&gt; for PHP with OS X 10.9.2 Mavericks using &lt;a href=&#34;http://brew.sh/&#34; title=&#34;Homebrew&#34;&gt;brew&lt;/a&gt;. This
requires &lt;a href=&#34;http://gearman.info/libgearman/&#34; title=&#34;libgearman&#34;&gt;libgearman&lt;/a&gt; and the easiest way to get it is probably to
&lt;a href=&#34;http://richardsumilang.com/server/gearman/install-gearman-on-os-x/&#34;&gt;install gearman&lt;/a&gt; through brew, of course.&lt;/p&gt;

&lt;p&gt;It might also be worth noting that this works for me with the brew build of PHP.
It will probably work for the distribution that comes with OS X but I haven&amp;rsquo;t
tested.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34; title=&#34;Install&#34;&gt;sudo pecl install gearman&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next copy the following contents into &lt;code&gt;/usr/local/etc/php/5.4/conf.d/ext-gearman.ini&lt;/code&gt;
(or wherever your extension config directory is):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34; title=&#34;Extension configuration&#34;&gt;[gearman]
extension=&#34;/usr/local/Cellar/php54/5.4.13/lib/php/extensions/no-debug-non-zts-20100525/gearman.so&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart apache:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apachectl restart&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Test to make sure it&amp;rsquo;s loaded with &lt;code&gt;phpinfo&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to upgrade to PHP 5.4 on Ubuntu 12.10</title>
      <link>http://richardsumilang.com/unix-like/ubuntu/upgrade-php-5.4-on-ubuntu-12.10/</link>
      <pubDate>Sun, 36 Aug 310300 03:03:03 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/unix-like/ubuntu/upgrade-php-5.4-on-ubuntu-12.10/</guid>
      <description>&lt;p&gt;PHP 5.4 is not in the standard Ubuntu 12.10 repositories. We will use a
backported version of PHP 5.4 by configuring a 3rd party PPA. Open a terminal
and run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34; title=&#34;Installation Instructions&#34;&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ondrej/php5-oldstable
sudo apt-get update; sudo apt-get install php5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you compiled or installed any PHP extensions via &lt;code&gt;pecl&lt;/code&gt; then you will need to
reinstall those too. Development packages must be upgraded before you run &lt;code&gt;pecl&lt;/code&gt;
or &lt;code&gt;phpize&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34; title=&#34;Development packages&#34;&gt;sudo apt-get install php-pear php5-dev&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test if everything is ok by running &lt;code&gt;phpinfo();&lt;/code&gt; from a PHP script on your
web-server and &lt;code&gt;php -i&lt;/code&gt; from your terminal.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a MongoDB ObjectID from a timestamp using PHP</title>
      <link>http://richardsumilang.com/programming/php/mongodb/create-a-mongodb-objectid-from-a-timestamp-using-php/</link>
      <pubDate>Sun, 36 Aug 310300 03:03:03 PST</pubDate>
      <author>Richard Sumilang</author>
      <guid>http://richardsumilang.com/programming/php/mongodb/create-a-mongodb-objectid-from-a-timestamp-using-php/</guid>
      <description>

&lt;p&gt;This is a useful tidbit of code to have until PHP adds this feature into their
MongoDB extension. I stumbled on an example on
&lt;a href=&#34;http://stackoverflow.com/questions/14370143/create-mongodb-objectid-from-date-in-the-past-using-php-driver&#34; title=&#34;Create MongoDB ObjectID from date in the past using PHP driver&#34;&gt;Stack Overflow&lt;/a&gt;
illustration showing how to do this and rewrote it in what I think is a slightly
more modern way that does the same thing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/reference/object-id/&#34; title=&#34;ObjectId - MongoDB Manual 2.4.9&#34;&gt;ObjectId&lt;/a&gt;&amp;rsquo;s
are constructed using a 4-byte timestamp value, 3-byte machine identifier, 2-byte process id, and a 3-byte counter which create a 12-byte BSON type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 --------------------------------------------------
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---------------|-----------|-------|--------------|
| time          | machine   | pid   | counter      |
 --------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Knowing that makes this PHP code easy to understand:&lt;/p&gt;

&lt;h2 id=&#34;mongoutil:1536523388bd0e63a6faba6ae8068887&#34;&gt;MongoUtil:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34; title=&#34;MongoUtil.php&#34;&gt;/**
 * Class MongoUtil.
 */
class MongoUtil {

    /**
     * This is needed to keep documents unique that have the same timestamp.
     * @var integer
     * @see $timestamp
     */
    public static $_mongoIdFromTimestampCounter = 0;

    /**
     * Mongo Id From Timestamp
     * @param integer $timestamp
     * @return MongoID
     * @see http://docs.mongodb.org/manual/reference/object-id/
     */
    public static function mongoIdFromTimestamp( $timestamp ) {
        // Build Binary Id
        $binaryTimestamp = pack(&#39;N&#39;, $timestamp); // unsigned long
        $machineId = substr(md5(gethostname()), 0, 3); // 3 bit machine identifier
        $binaryPID = pack(&#39;n&#39;, posix_getpid()); // unsigned short
        $counter = substr(pack(&#39;N&#39;, self::$_mongoIdFromTimestampCounter++), 1, 3); // Counter
        $binaryId = &#34;{$binTimestamp}{$machineId}{$machineId}{$counter}&#34;;

        // Convert to ASCII
        $id = &#39;&#39;;
        for ($i = 0; $i &amp;lt; 12; $i++) {
            $id .= sprintf(&#34;%02X&#34;, ord($binaryId[$i]));
        }

        // Return Mongo ID
        return new MongoID($id);
    }

}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-of-usage:1536523388bd0e63a6faba6ae8068887&#34;&gt;Example of usage:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34; title=&#34;Example&#34;&gt;$date = strtotime(&#39;today&#39;);
$mongoId = MongoUtil::mongoIdFromTimestamp( $date );

// Do more stuff.&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
